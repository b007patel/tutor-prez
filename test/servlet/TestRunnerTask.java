// modified example code from
// >> http://javabeat.net/asynchronous-servlet-servlet-3-0/
// accessed on Sep 22, 2016
package test.servlet;

import java.io.IOException;
import java.util.StringTokenizer;
import java.util.Date;
import java.util.Arrays;
import java.util.HashMap;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import javax.servlet.ServletException;
import javax.servlet.AsyncContext;
import javax.servlet.ServletOutputStream;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;

import org.testng.xml.XmlClass;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

import tputil.EasyOS;
import tputil.EasyFileReader;
import tputil.EasyUtil;

import test.TPServletListener;
import test.RunTest;
import test.ChemRxnTest;

public class TestRunnerTask implements Runnable, PropertyChangeListener  {

    /**
     * serialVersion UID generated by compiler
     */
    private static final long serialVersionUID = 5236105978614337173L;
    private AsyncContext aCtx;
    private Date start_time;
    private String runUrl;
    private ServletRequest req;
    private ServletResponse resp;
    private TPServletListener tpsl;

    public TestRunnerTask(AsyncContext aCtx, String runUrl, Date start_time) {
        this.aCtx = aCtx;
        this.runUrl = runUrl;
        this.start_time = start_time;
        TestRunnerState.getInstance().addPropertyChangeListener(this);
    }

    public TestRunnerTask(AsyncContext aCtx, String runUrl) {
        this(aCtx, runUrl, new Date());
    }

    public Date getStartTime() {
        return start_time;
    }

    public void propertyChange(PropertyChangeEvent evt) {
        String oldacstr = "", newacstr = "";
        String completedEndOfMsg = "already completed processing."; 
        if (evt.getPropertyName().equals("runningAsyncContext")) {
            try {
                AsyncContext oldAC = (AsyncContext) evt.getOldValue();
                oldacstr = EasyUtil.briefObjToString(oldAC);
                if (oldAC.getRequest() == null) {
                    EasyUtil.log("TR Task - old AsyncCtx %s has a null " +
                            "servlet request object!", oldacstr);
                } else if (oldAC.getRequest().isAsyncStarted()) {
                    oldAC.complete();
                    EasyUtil.log("TR Task - old AsyncCtx %s did not " +
                            "complete. Called oldAC.complete()", oldacstr);
                }
            } catch (IllegalStateException oldACISExp) {
                String ise_msg = oldACISExp.getMessage();

                // if the IllegalStateExcp was not thrown by an AC, then
                // don't handle it. According to J2EE 7 spec,
                // AC.getRequest() will throw an IllegalStateExcp when the
                // AC is completed or dispatched.
                if (!ise_msg.contains("AsyncContext")) {
                    throw oldACISExp;
                }
            } catch (Exception oldACExp) {
                EasyUtil.log("TR Task - unexpected exception while trying " +
                        "to clean up oldAC %s!.", oldacstr);
                EasyUtil.showThrow(oldACExp, true);
                System.err.println();
            }
            try {
                aCtx = (AsyncContext) evt.getNewValue();
                newacstr = EasyUtil.briefObjToString(aCtx);
                EasyUtil.log("TR Task - trying to change aCtx from %s to " +
                        "%s...", oldacstr, newacstr);
                resp = aCtx.getResponse();
                String nullobjstr = "servlet response";
                if (resp == null || tpsl == null) {
                    if (tpsl == null) {
                        nullobjstr = "test listener";
                    }
                    EasyUtil.log("TR Task - new AsyncCtx %s has a null %s " +
                            "object!", newacstr, nullobjstr);
                } else {
                    tpsl.setOutputStream(resp.getOutputStream());
                    EasyUtil.log("TR Task - using new AC's output stream\n");
                }
            } catch (Exception e) {
                EasyUtil.log("Cannot set TaskRunner's servletOutputStream " +
                        "to a new value!!");
                EasyUtil.showThrow(e);
                System.err.println();
            }
        }
    }

    @Override
    public void run() {
        ServletOutputStream srvout = null;
        try {
            req = aCtx.getRequest();
            resp = aCtx.getResponse();

            String run_pct = req.getParameter("runpct");
            String fail_pct = req.getParameter("failpct");
            if ((run_pct == null || "".equals(run_pct.trim())) ||
                    (fail_pct == null || "".equals(fail_pct.trim()))) {
                // aCtx might be in a bad state if .complete() was run
                // elsewhere
                String url = "";
                try {
                    url = TestRunnerState.getInstance().getRunningReq(
                            ).getUrl();
                    EasyUtil.log("TR Task - url from queue: '" + url + "'");
                } catch (Exception e) {
                    // if first element already removed, fall back to raw
                    // Test Runner URL
                    url = runUrl;
                }
                EasyUtil.log("TR Task - final url '" + url + "'");
                String raw_post_parms = url.substring(url.indexOf("?") + 1);
                StringTokenizer post_parms =
                        new StringTokenizer(raw_post_parms, "&");
                String curr_parm;
                while (post_parms.hasMoreTokens()) {
                    curr_parm = post_parms.nextToken();
                    if (curr_parm.startsWith("runpct=")) {
                        run_pct =
                            curr_parm.substring(curr_parm.indexOf("=") + 1);
                    } else if (curr_parm.startsWith("failpct=")) {
                        fail_pct =
                            curr_parm.substring(curr_parm.indexOf("=") + 1);
                    }
                }
            }

            srvout = resp.getOutputStream();
            this.tpsl = new TPServletListener();
            tpsl.setOutputStream(srvout);

            // for called test class(es). May be removed or replaced with
            // different RunTest methods
            String servlet_container_home = "/var/lib/tomcat8/";
            System.setProperty("tptest.wcprop", servlet_container_home +
                "webcli.props");
            System.setProperty("tptest.dbprop", "");
            RunTest rt = new RunTest(tpsl);

            String client = req.getRemoteHost();
            if (client == null || client.equals("")) {
                client = req.getRemoteAddr();
            }
            if (client.matches("^[1-9].+")) {
                client = client.substring(0, client.indexOf(".", 4) + 1);
                client += "~.~";
            }

            String curtestdir = EasyUtil.now();
            curtestdir = client + "_" + curtestdir;
            XmlSuite curxml = new XmlSuite();
            XmlTest curtest = new XmlTest();
            curtest.addParameter("run_pct", run_pct);
            curtest.addParameter("fail_pct", fail_pct);
            curtest.addParameter("servletCalled", "true");
            HashMap<String, String> suiteMetaDataMap =
                    new HashMap<String, String>();
            curtest.setClasses(Arrays.asList(new XmlClass(ChemRxnTest.class)));

            EasyFileReader ezr =
                    new EasyFileReader("/var/www/browser-info.txt");
            // because the suite name is used as part of a Javascript function
            // name in the HTML results, it cannot have '-'s or '.'s. Only '_'s
            String browserinfo = ezr.readLine().trim().replace(' ', '_');
            ezr.close();

            String suite_name = "_" + fail_pct + "pct_fail";
            if (fail_pct.equals("0")) {
                suite_name = "_all_pass";
            }
            String osname = EasyOS.osname;
            String osver = EasyOS.osver;
            String brname = "Firefox";
            if (browserinfo.contains("Chrome")) {
                brname = "Chrome";
            }
            suite_name = brname + "_OS_" + osname + suite_name;
            suite_name = suite_name.replace('-', '_');
            suite_name = suite_name.replace('.', '_');
            suite_name = suite_name.replace(' ', '_');
            curxml.setName(suite_name);
            rt.setDefaultSuiteName(curxml.getName());
            curtest.setName("test.ChemRxnTest " + browserinfo + ", OS " +
                    osname + " ver " + osver);
            curtest.setSuite(curxml);
            curxml.setTests(Arrays.asList(curtest));
            curxml.setParameters(suiteMetaDataMap);
            rt.setXmlSuites(Arrays.asList(curxml));

            rt.setOutputDirectory("/var/www/testlogs/" + curtestdir);

            EasyUtil.log("TRTask: about to run TRTask...\n");
            rt.run();

        } catch (Exception e) {
            EasyUtil.showThrow(e);
        } finally {
            try {
                EasyUtil.log("TRTask: closing repsonse and completing aCtx");
                try {
                    srvout.print("");
                    srvout.close();
                } catch (IOException ioe) {
                    // servlet output stream already closed
                }
                if (aCtx.getRequest().isAsyncStarted()) aCtx.complete();
                EasyUtil.log("TRTask: after async ctx complete call!!\n");
            } catch (Exception e2) {}
            EasyUtil.log("TRTask: In finally clause - reverting to be run " +
                    "back to false\n");
            TestRunnerState.getInstance().setStartTime(null);
            TestRunnerState.getInstance().setToBeRun(false);
        }
    }

}

// modified example code from
// >> http://javabeat.net/asynchronous-servlet-servlet-3-0/
// accessed on Sep 22, 2016
package test.servlet;

import java.io.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.concurrent.ScheduledThreadPoolExecutor;

import javax.servlet.ServletException;
import javax.servlet.AsyncContext;
import javax.servlet.AsyncEvent;;
import javax.servlet.AsyncListener;
import javax.servlet.WriteListener;
import javax.servlet.annotation.*;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.testng.xml.XmlClass;
import org.testng.xml.XmlSuite;
import org.testng.xml.XmlTest;

import tputil.*;

import test.RunTest;
import test.ChemRxnTest;

@WebServlet(name = "TestRunnerServlet",
        urlPatterns = {"/TestRunner"}, 
        asyncSupported = true)
public class TestRunnerServlet extends HttpServlet {

    /**
     * serialVersion UID generated by compiler
     */
    private static final long serialVersionUID = 5236440105614337841L;

    protected void processRequest(HttpServletRequest req,
            HttpServletResponse resp) throws ServletException,
            IOException {
        EasyUtil.startLogging();
        AsyncContext ac = req.startAsync();
        //ac.setTimeout(7L * 60L * 1000L);
        ac.setTimeout(0);
        EasyUtil.log(EasyUtil.now() + " Async Servlet with thread: " +
                Thread.currentThread().toString());
        ac.addListener(new AsyncListener() {
            @Override
            public void onComplete(AsyncEvent event) throws IOException {
                EasyUtil.log(EasyUtil.now() + " Async complete");
            }
        
            @Override
            public void onTimeout(AsyncEvent event) throws IOException {
                EasyUtil.log(EasyUtil.now() + " Timed out...");
            }
        
            @Override
            public void onError(AsyncEvent event) throws IOException {
                EasyUtil.log(EasyUtil.now() + " Error...");
            }
        
            @Override
            public void onStartAsync(AsyncEvent event) throws IOException {
                EasyUtil.log(EasyUtil.now() + " Starting async...");
            }
        
        });

        /**
         * Scheduling the test running task using built-in ThreadPool-ing. Note
         * that this passes the AsyncContext object to TestRunningTask
         */
        int threadsInPool = 10;
        ScheduledThreadPoolExecutor exec =
                new ScheduledThreadPoolExecutor(threadsInPool);
        // add content header to force Chrome to process response properly
        resp.addHeader("content-type", "application/x-javascript");
        exec.execute(new TestRunnerTask(ac));
    }

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {
        System.out.println(EasyUtil.now() + "  GET called");
        processRequest(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {
        System.out.println(EasyUtil.now() + " POST called");
        Enumeration<String> hnames, hdrs;
        hnames = req.getHeaderNames();
        while (hnames.hasMoreElements()) {
            String hn = hnames.nextElement();
            hdrs = req.getHeaders(hn);
            while (hdrs.hasMoreElements()) {
                System.out.println(hn + " -- " + hdrs.nextElement());
            }
        }
        Map<String, String[]> parms = req.getParameterMap();
        Set<String> pkeys = parms.keySet();
        String[] currpv;
        for (String currp : pkeys) {
            System.out.print("<" + currp + "> -- ");
            currpv = parms.get(currp);
            for (int i=0; i < currpv.length; i++) {
                System.out.print(", " + currpv[i]);
            }
            System.out.println();
        }
        System.out.println(EasyUtil.now() + " done POST info");
        processRequest(req, resp);
    }

}

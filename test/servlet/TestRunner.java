// modified example code from
// >> http://javabeat.net/asynchronous-servlet-servlet-3-0/
// accessed on Sep 22, 2016
package test.servlet;

import java.io.IOException;
import java.io.FileReader;
import java.util.Date;
import java.util.Map;
import java.util.Set;
import java.util.Enumeration;
import java.util.StringTokenizer;;

import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.AsyncContext;
import javax.servlet.AsyncEvent;
import javax.servlet.AsyncListener;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import test.servlet.TestRunnerState;

import tputil.EasyUtil;

@WebServlet(name = "TestRunner",
        urlPatterns = {"/TestRunner"},
        asyncSupported = true)
public class TestRunner extends HttpServlet {

    /**
     * serialVersion UID generated by compiler
     */
    private static final long serialVersionUID = 5236440105614337841L;
    public static final int TEST_TIMEOUT = 7; // in minutes

    private String[] getRequestParms(HttpServletRequest req) {
        String[] rv = new String[3];
 
        rv[0] = req.getParameter("runpct");
        rv[1] = req.getParameter("failpct");
        rv[2] = req.getParameter("ts");
        EasyUtil.log("TRunner - first found (post) parms: %s, %s, %s\n",
                rv[0], rv[1], rv[2]);
        if ((rv[0] == null || "".equals(rv[0].trim())) ||
                    (rv[1] == null || "".equals(rv[1].trim()))) {
            String url = req.getHeader("referer");
            EasyUtil.log("Referer url - '" + url + "'");
            url = url.substring(url.indexOf("?") + 1);
            /*EasyUtil.log("Parms - '" + url + "'\n");
            StringTokenizer post_parms = new StringTokenizer(url, "&");
            String cur_parm;
            while (post_parms.hasMoreTokens()) {
                cur_parm = post_parms.nextToken();
                if (cur_parm.startsWith("runpct=")) {
                    rv[0] = cur_parm.substring(cur_parm.indexOf("=") + 1);
                } else if (cur_parm.startsWith("failpct=")) {
                    rv[1] = cur_parm.substring(cur_parm.indexOf("=") + 1);
                } else if (cur_parm.startsWith("ts=")) {
                    rv[2] = cur_parm.substring(cur_parm.indexOf("=") + 1);
                }
            }*/
        }
        return rv;
    }

    protected void processRequest(HttpServletRequest req,
            HttpServletResponse resp) throws ServletException,
            IOException {
        EasyUtil.startLogging();

        // add content header to force Chrome to process response properly
        resp.addHeader("content-type", "application/x-javascript");
        resp.addHeader("content-length", "");

        AsyncContext ac = req.startAsync();
        String acstr = EasyUtil.briefObjToString(ac);
        EasyUtil.log("TRunner - set running aCtx to " + acstr + "\n");
        TestRunnerState.getInstance().setRunningAsyncContext(ac);
        ac.setTimeout(TEST_TIMEOUT * 60L * 1000L);
        EasyUtil.log("Async Servlet with thread: " +
                Thread.currentThread().toString());
        ac.addListener(new AsyncListener() {
            @Override
            public void onComplete(AsyncEvent event) throws IOException {
                String acstr = EasyUtil.briefObjToString(
                        event.getAsyncContext());
                EasyUtil.log("TRunner - Async %s complete", acstr);
            }

            @Override
            public void onTimeout(AsyncEvent event) throws IOException {
                String acstr = EasyUtil.briefObjToString(
                        event.getAsyncContext());
                EasyUtil.log("TRunner - Async %s Timed out...", acstr);
            }

            @Override
            public void onError(AsyncEvent event) throws IOException {
                String acstr = EasyUtil.briefObjToString(
                        event.getAsyncContext());
                EasyUtil.log("TRunner - Async %s Error...", acstr);
                event.getThrowable().printStackTrace();
            }

            @Override
            public void onStartAsync(AsyncEvent event) throws IOException {
                String acstr = EasyUtil.briefObjToString(
                        event.getAsyncContext());
                EasyUtil.log("TRunner - Starting Async %s ...", acstr);
            }

        });

        char[] cachedOutput = new char[5120];
        FileReader cachein = null;
        boolean startRun = true;
        try {
            cachein = TestRunnerState.getInstance().openCacheReader();
            startRun = !cachein.ready();
            ServletOutputStream sostr = resp.getOutputStream();
            while (cachein.ready()) {
                cachein.read(cachedOutput);
                sostr.print(new String(cachedOutput));
                sostr.flush();
            }
        } catch (Exception e) {
            // no cached output
        }

        if (startRun) {
            EasyUtil.log("TRunner - calling TRDispatch.addRemTask...");
            /*String run_pct = req.getParameter("runpct");
            String fail_pct = req.getParameter("failpct");*/
            String[] postParms = getRequestParms(req);
            String run_pct = postParms[0];
            String fail_pct = postParms[1];
            String url = req.getRequestURI() + "?runpct=" + run_pct +
                    "&failpct=" + fail_pct;
            if (run_pct == null || fail_pct == null) {
                // first request serviced, so need to get query from runtest
                url = req.getHeader("referer");
            }
            EasyUtil.log("runpct=%s pct, failpct=%s pct, final url: %s",
                run_pct, fail_pct, url);
            TestRunnerDispatcher.addRemoteTask(new TestRunnerTask(ac, url));
        }

    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {
        EasyUtil.log("TRunner - POST called");
        Enumeration<String> hnames, hdrs;
        hnames = req.getHeaderNames();
        while (hnames.hasMoreElements()) {
            String hn = hnames.nextElement();
            hdrs = req.getHeaders(hn);
            while (hdrs.hasMoreElements()) {
                System.out.println(hn + " -- " + hdrs.nextElement());
            }
        }
        Map<String, String[]> parms = req.getParameterMap();
        Set<String> pkeys = parms.keySet();
        String[] currpv;
        for (String currp : pkeys) {
            System.out.print("<" + currp + "> -- ");
            currpv = parms.get(currp);
            for (int i=0; i < currpv.length; i++) {
                System.out.print(", " + currpv[i]);
            }
            System.out.println();
        }
        EasyUtil.log("TRunner - done POST info");
        processRequest(req, resp);
    }

}
